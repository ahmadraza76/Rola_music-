import logging
import asyncio
import json
import os
from pyrogram import Client, filters, idle
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pytgcalls import PyTgCalls
from pytgcalls.types import StreamType
from pytgcalls.types.input_stream import AudioPiped
import yt_dlp as youtube_dl
from yt_dlp.utils import DownloadError
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import aiofiles
import aiohttp
from config import API_ID, API_HASH, BOT_TOKEN, OWNER_ID, SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET

# тЬЕ Keep Alive Server
from keep_alive import keep_alive
keep_alive()

# тЬЕ Logging Setup
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("rolavibe.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# тЬЕ Bot Client
app = Client("RolaVibeBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
call_py = PyTgCalls(app)

# тЬЕ Global Variables
queue = {}
queue_lock = asyncio.Lock()
is_call_active = False
maintenance_mode = False
MAINTENANCE_FILE = "maintenance_mode.json"
FM_CHANNELS = {
    "Radio Mirchi": "http://example.com/radiomirchi",
    "Red FM": "http://example.com/redfm",
    "Big FM": "http://example.com/bigfm"
}

# тЬЕ AI Status
AI_ENABLED = False  # Default: AI is disabled

# тЬЕ Cache Files
CACHE_DIR = "cache"
os.makedirs(CACHE_DIR, exist_ok=True)

# тЬЕ YouTube-DL Options
ydl_opts = {
    'format': 'bestaudio',
    'quiet': True,
    'noplaylist': True
}

# тЬЕ Spotify API Initialization
sp = None
if SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET:
    try:
        sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
            client_id=SPOTIFY_CLIENT_ID,
            client_secret=SPOTIFY_CLIENT_SECRET
        ))
    except Exception as e:
        logger.error(f"Spotify API Initialization Error: {e}")

# тЬЕ Helper Functions
async def load_maintenance_mode():
    global maintenance_mode
    try:
        async with aiofiles.open(MAINTENANCE_FILE, "r") as f:
            data = await f.read()
            maintenance_mode = json.loads(data) if data else False
    except (FileNotFoundError, json.JSONDecodeError):
        maintenance_mode = False

async def save_maintenance_mode():
    try:
        async with aiofiles.open(MAINTENANCE_FILE, "w") as f:
            await f.write(json.dumps(maintenance_mode))
    except Exception as e:
        logger.error(f"тЭМ Maintenance Mode Save Error: {e}")

async def ensure_files_exist():
    files = ["queue.json", "admin_commands.json", "allowed_groups.json", "fm_channels.json"]
    for file in files:
        if not os.path.exists(file):
            async with aiofiles.open(file, "w") as f:
                await f.write(json.dumps({}))

async def load_queue():
    global queue
    try:
        async with aiofiles.open("queue.json", "r") as f:
            data = await f.read()
            queue = json.loads(data) if data else {}
    except (FileNotFoundError, json.JSONDecodeError):
        queue = {}

async def save_queue():
    try:
        async with aiofiles.open("queue.json", "w") as f:
            await f.write(json.dumps(queue))
    except Exception as e:
        logger.error(f"тЭМ Queue Save Error: {e}")

async def auto_save():
    while True:
        await asyncio.sleep(120)
        try:
            await save_queue()
            await save_fm_channels()
            await save_maintenance_mode()
        except Exception as e:
            logger.error(f"тЭМ Auto-Save Error: {e}")

async def is_admin_and_allowed(chat_id, user_id, command):
    try:
        member = await app.get_chat_member(chat_id, user_id)
        if member.status not in ["administrator", "creator"]:
            return False
        async with aiofiles.open("admin_commands.json", "r") as f:
            data = json.loads(await f.read())
            return command in data.get("allowed_admin_commands", [])
    except Exception as e:
        logger.error(f"Admin Check Error: {e}")
        return False

# тЬЕ Cache Function
async def get_cached_data(cache_key):
    cache_file = os.path.join(CACHE_DIR, f"{cache_key}.json")
    if os.path.exists(cache_file):
        async with aiofiles.open(cache_file, "r") as f:
            return json.loads(await f.read())
    return None

async def save_cached_data(cache_key, data):
    cache_file = os.path.join(CACHE_DIR, f"{cache_key}.json")
    async with aiofiles.open(cache_file, "w") as f:
        await f.write(json.dumps(data))

# тЬЕ Async YouTube Search with Caching
async def get_youtube_video(query):
    cache_key = f"youtube_{query}"
    cached_data = await get_cached_data(cache_key)
    if cached_data:
        return cached_data

    loop = asyncio.get_event_loop()
    try:
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            info = await loop.run_in_executor(None, lambda: ydl.extract_info(f"ytsearch:{query}", download=False))
            if "entries" in info and len(info["entries"]) > 0:
                video = info["entries"][0]
                await save_cached_data(cache_key, video)
                return video
            return None
    except Exception as e:
        logger.error(f"тЭМ YouTube Search Error: {e}")
        return None

# тЬЕ Async Spotify API Call with Caching
async def get_spotify_song_details(query):
    cache_key = f"spotify_{query}"
    cached_data = await get_cached_data(cache_key)
    if cached_data:
        return cached_data

    try:
        if not sp:
            return None
        results = sp.search(q=query, limit=1)
        if results["tracks"]["items"]:
            track = results["tracks"]["items"][0]
            song_details = {
                "title": track["name"],
                "artist": track["artists"][0]["name"],
                "url": track["external_urls"]["spotify"]
            }
            await save_cached_data(cache_key, song_details)
            return song_details
        return None
    except Exception as e:
        logger.error(f"тЭМ Spotify API Error: {e}")
        return None

def get_thumbnail(video_id):
    return f"https://img.youtube.com/vi/{video_id}/maxresdefault.jpg"

async def is_group_allowed(chat_id):
    try:
        async with aiofiles.open("allowed_groups.json", "r") as f:
            data = await f.read()
            allowed_groups = json.loads(data) if data else {}
            return str(chat_id) in allowed_groups
    except (FileNotFoundError, json.JSONDecodeError):
        return False

# тЬЕ Commands
@app.on_message(filters.command("start"))
async def start(client, message: Message):
    if message.chat.type == "supergroup" and not await is_group_allowed(message.chat.id):
        return await message.reply_text("тЪая╕П рдпрд╣ рдЧреНрд░реБрдк рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХреГрдд рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдмреЙрдЯ рдУрдирд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред")

    if maintenance_mode and message.from_user.id != OWNER_ID:
        return await message.reply_text("тЪая╕П рдмреЙрдЯ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдореЗрдиреНрдЯреЗрдиреЗрдВрд╕ рдореЛрдб рдореЗрдВ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯО╢ рдЧрд╛рдирд╛ рдЪрд▓рд╛рдПрдВ", callback_data="play_music"),
         InlineKeyboardButton("ЁЯФК рд╡реЙрд▓реНрдпреВрдо", callback_data="volume_control")],
        [InlineKeyboardButton("ЁЯУМ рдореЗрд░реА рдкреНрд▓реЗрд▓рд┐рд╕реНрдЯ", callback_data="my_playlist"),
         InlineKeyboardButton("ЁЯО╡ рдЕрднреА рдЪрд▓ рд░рд╣рд╛ рд╣реИ", callback_data="now_playing")],
        [InlineKeyboardButton("тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕", callback_data="settings"),
         InlineKeyboardButton("ЁЯУв рдЕрдкрдбреЗрдЯреНрд╕", url="https://t.me/RolaVibeUpdates")],
        [InlineKeyboardButton("ЁЯУ╗ рд░реЗрдбрд┐рдпреЛ", callback_data="radio")]
    ])

    if message.from_user.id == OWNER_ID:
        keyboard.inline_keyboard.append([InlineKeyboardButton("ЁЯСС рдУрдирд░ рдкреИрдирд▓", callback_data="owner_panel")])

    await message.reply_text(
        "**тЬи Rola Vibe рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯО╢**\n\n"
        "ЁЯОз *рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рд╣рд╛рдИ-рдХреНрд╡рд╛рд▓рд┐рдЯреА рдореНрдпреВрдЬрд┐рдХ рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВред*\n"
        "ЁЯО╢ *рдмрд╕ рдПрдХ рдХрдорд╛рдВрдб рд╕реЗ рдЕрдкрдиреЗ рдкрд╕рдВрджреАрджрд╛ рдЧрд╛рдиреЗ рдЪрд▓рд╛рдПрдВ!*\n\n"
        "ЁЯУМ *рдирд╡реАрдирддрдо рдЕрдкрдбреЗрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдЬреБрдбрд╝реЗрдВ* [@RolaVibeUpdates](https://t.me/RolaVibeUpdates)\n\n"
        "ЁЯСитАНЁЯТ╗ *рдбреЗрд╡рд▓рдкрд░:* [Mr Nick](https://t.me/5620922625)",
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

# тЬЕ Help Command (Admin and Owner Commands Info)
@app.on_message(filters.command("help"))
async def help_command(client, message: Message):
    help_text = (
        "тЬи **Rola Vibe Bot Help Menu** тЬи\n\n"
        "ЁЯО╡ **рд╕рднреА рдХреЗ рд▓рд┐рдП:**\n"
        "тЦля╕П .start - рдмреЙрдЯ рдХреЛ рд╕реНрдЯрд╛рд░реНрдЯ рдХрд░реЗрдВ рдФрд░ рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ рджреЗрдЦреЗрдВред\n"
        "тЦля╕П .help - рдпрд╣ рд╣реЗрд▓реНрдк рдореЗрдиреВ рджреЗрдЦреЗрдВред\n\n"
        "ЁЯФз **рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕:**\n"
        "тЦля╕П .play <song_name> - рдЧрд╛рдирд╛ рдЪрд▓рд╛рдПрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)ред\n"
        "тЦля╕П .stop - рдкреНрд▓реЗрдмреИрдХ рд░реЛрдХреЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)ред\n"
        "тЦля╕П .pause - рдкреНрд▓реЗрдмреИрдХ рдкреЙрдЬрд╝ рдХрд░реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)ред\n"
        "тЦля╕П .resume - рдкреНрд▓реЗрдмреИрдХ рд░рд┐рдЬреНрдпреВрдо рдХрд░реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)ред\n"
        "тЦля╕П .skip - рдЕрдЧрд▓рд╛ рдЧрд╛рдирд╛ рдЪрд▓рд╛рдПрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди)ред\n\n"
        "ЁЯСС **рдУрдирд░ рдХрдорд╛рдВрдбреНрд╕:**\n"
        "тЦля╕П .enableadmin <command> - рдПрдбрдорд┐рди рдХрдорд╛рдВрдб рдХреЛ рд╕рдХреНрд╖рдо рдХрд░реЗрдВред\n"
        "тЦля╕П .disableadmin <command> - рдПрдбрдорд┐рди рдХрдорд╛рдВрдб рдХреЛ рдЕрдХреНрд╖рдо рдХрд░реЗрдВред\n"
        "тЦля╕П .playvideo <video_url> - рд╡реАрдбрд┐рдпреЛ рдЪрд▓рд╛рдПрдВ (рдХреЗрд╡рд▓ рдУрдирд░)ред\n"
        "тЦля╕П .addgroup - рдЧреНрд░реБрдк рдХреЛ рдмреЙрдЯ рдореЗрдВ рдЬреЛрдбрд╝реЗрдВ (рдХреЗрд╡рд▓ рдУрдирд░)ред\n\n"
        "ЁЯУМ *рдиреЛрдЯ:* рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕ рдХреЗрд╡рд▓ рдЧреНрд░реБрдк рдПрдбрдорд┐рди рдФрд░ рдмреЙрдЯ рдУрдирд░ рд╣реА рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред\n"
        "ЁЯОз *Rola Vibe рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!* ЁЯО╢"
    )

    await message.reply_text(
        help_text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯТм ROLA CHAT", url="https://t.me/RolaVibeChat"),
             InlineKeyboardButton("ЁЯСитАНЁЯТ╗ DEVELOPER", url="https://t.me/5620922625)]
        ])
    )

# ЁЯО╡ Play/Rola Command (Admin Check)
@app.on_message(filters.command(["play", "rola"], prefixes=".") & filters.group)
async def play_rola_command(client, message: Message):
    if not await is_group_allowed(message.chat.id):
        return await message.reply_text("тЪая╕П рдпрд╣ рдЧреНрд░реБрдк рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдзрд┐рдХреГрдд рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдмреЙрдЯ рдУрдирд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред")

    global is_call_active
    chat_id = message.chat.id
    user = message.from_user

    if maintenance_mode and user.id != OWNER_ID:
        return await message.reply_text("тЪая╕П рдмреЙрдЯ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдореЗрдиреНрдЯреЗрдиреЗрдВрд╕ рдореЛрдб рдореЗрдВ рд╣реИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

    if not await is_admin_and_allowed(chat_id, user.id, "play"):
        return await message.reply_text("тЪая╕П *рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!*")

    query = " ".join(message.command[1:]) if len(message.command) > 1 else None
    if not query:
        return await message.reply_text("тЪая╕П *рдХреГрдкрдпрд╛ рдЧрд╛рдиреЗ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ!*")

    await message.delete()
    searching_msg = await message.reply_text("ЁЯФН *рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдБ...*")

    try:
        # Fetch song details from Spotify
        spotify_song = await get_spotify_song_details(query)
        if not spotify_song:
            return await searching_msg.edit("тЪая╕П *рд╕реНрдкреЙрдЯрд┐рдлрд╛рдИ рдкрд░ рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдХреЛрдИ рдЕрдиреНрдп рдирд╛рдо рдЖрдЬрд╝рдорд╛рдПрдВред*")

        # Search YouTube for the song
        info = await get_youtube_video(f"{spotify_song['title']} {spotify_song['artist']}")
        if "entries" in info and len(info["entries"]) > 0:
            video = info["entries"][0]
        else:
            raise DownloadError("No results found.")
            
        video_url = video["url"]
        title = video["title"]
        video_id = video["id"]
        duration = video["duration"]

        # Check song duration
        if duration > 600:  # 10 minutes
            return await searching_msg.edit("тЪая╕П *рдЧрд╛рдирд╛ рдмрд╣реБрдд рд▓рдВрдмрд╛ рд╣реИред рдЕрдзрд┐рдХрддрдо рдЕрдиреБрдордд рдЕрд╡рдзрд┐ 10 рдорд┐рдирдЯ рд╣реИред*")
    except DownloadError:
        return await searching_msg.edit("тЪая╕П *рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдХреЛрдИ рдЕрдиреНрдп рдирд╛рдо рдЖрдЬрд╝рдорд╛рдПрдВред*")
    except Exception as e:
        logger.error(f"Play Command Error: {e}")
        return await searching_msg.edit("тЪая╕П *рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред*")

    await searching_msg.delete()

    # Add song to queue
    async with queue_lock:
        queue.setdefault(chat_id, []).append((video_url, title, video_id))
        await save_queue()

    # Join voice call if not already joined
    if not is_call_active:
        await call_py.join_group_call(
            chat_id,
            AudioPiped(video_url, stream_type=StreamType().pulse_stream)
        )
        is_call_active = True

    # Send now playing message with Expand option
    await message.reply_photo(
        photo=get_thumbnail(video_id),
        caption=f"ЁЯО╡ **рдЕрднреА рдЪрд▓ рд░рд╣рд╛ рд╣реИ:** `{title}`\n"
                f"ЁЯФЧ [YouTube рдкрд░ рджреЗрдЦреЗрдВ](https://youtu.be/{video_id})\n\n"
                "ЁЯОз *Rola Vibe рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!*",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("тП╕я╕П рдкреЙрдЬрд╝", callback_data="pause"),
             InlineKeyboardButton("тЦ╢я╕П рд░рд┐рдЬреНрдпреВрдо", callback_data="resume"),
             InlineKeyboardButton("тПня╕П рд╕реНрдХрд┐рдк", callback_data="skip"),
             InlineKeyboardButton("тП╣я╕П рд░реЛрдХреЗрдВ", callback_data="stop")],
            [InlineKeyboardButton("ЁЯФН рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░реЗрдВ", callback_data="expand")]
        ])
    )

# тЬЕ Expand Callback
@app.on_callback_query(filters.regex("^expand$"))
async def expand_callback(client, callback_query):
    chat_id = callback_query.message.chat.id
    if "content" in queue.get(chat_id, {}):
        content = queue[chat_id]["content"]
        await callback_query.edit_message_text(
            f"ЁЯФН **рд╡рд┐рд╕реНрддреГрдд рд╕рд╛рдордЧреНрд░реА:**\n\n{content}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("тППя╕П рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд░реЗрдВ", callback_data="collapse")]
            ])
        )
    else:
        await callback_query.answer("тЪая╕П рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╕рд╛рдордЧреНрд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред", show_alert=True)

# тЬЕ Collapse Callback
@app.on_callback_query(filters.regex("^collapse$"))
async def collapse_callback(client, callback_query):
    await callback_query.edit_message_text("рд╕рд╛рдордЧреНрд░реА рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХреА рдЧрдИред")

# ЁЯО╡ Stop Command (Admin Check)
@app.on_message(filters.command("stop", prefixes=".") & filters.group)
async def stop(client, message: Message):
    global is_call_active
    chat_id = message.chat.id
    user = message.from_user

    if not await is_admin_and_allowed(chat_id, user.id, "stop"):
        return await message.reply_text("тЪая╕П *рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!*")

    async with queue_lock:
        queue.pop(chat_id, None)
        await save_queue()

    if is_call_active:
        await call_py.leave_group_call(chat_id)
        is_call_active = False
    await message.reply_text("ЁЯЫС *рдкреНрд▓реЗрдмреИрдХ рд░реЛрдХ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред*")

# тЬЕ Owner Commands: Enable/Disable Admin Commands
@app.on_message(filters.command("enableadmin", prefixes=".") & filters.user(OWNER_ID))
async def enable_admin_command(client, message: Message):
    cmd = message.text.split(" ", 1)[1].strip()
    async with aiofiles.open("admin_commands.json", "r+") as f:
        data = json.loads(await f.read())
        if cmd not in data["allowed_admin_commands"]:
            data["allowed_admin_commands"].append(cmd)
            await f.seek(0)
            await f.write(json.dumps(data))
            return await message.reply_text(f"тЬЕ *рдПрдбрдорд┐рди рдХрдорд╛рдВрдб `{cmd}` рд╕рдХреНрд╖рдо рдХреА рдЧрдИ!*")

@app.on_message(filters.command("disableadmin", prefixes=".") & filters.user(OWNER_ID))
async def disable_admin_command(client, message: Message):
    cmd = message.text.split(" ", 1)[1].strip()
    async with aiofiles.open("admin_commands.json", "r+") as f:
        data = json.loads(await f.read())
        if cmd in data["allowed_admin_commands"]:
            data["allowed_admin_commands"].remove(cmd)
            await f.seek(0)
            await f.write(json.dumps(data))
            return await message.reply_text(f"тЬЕ *рдПрдбрдорд┐рди рдХрдорд╛рдВрдб `{cmd}` рдЕрдХреНрд╖рдо рдХреА рдЧрдИ!*")

# ЁЯОе Play Video Command (Owner Only)
@app.on_message(filters.command("playvideo", prefixes=".") & filters.user(OWNER_ID))
async def play_video_command(client, message: Message):
    global is_call_active
    chat_id = message.chat.id
    user = message.from_user

    # Check if user is the bot owner
    if user.id != OWNER_ID:
        return await message.reply_text("тЪая╕П *рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ!*")

    # Get video URL from command
    video_url = " ".join(message.command[1:]) if len(message.command) > 1 else None
    if not video_url:
        return await message.reply_text("тЪая╕П *рдХреГрдкрдпрд╛ рд╡реАрдбрд┐рдпреЛ URL рджрд░реНрдЬ рдХрд░реЗрдВ!*")

    await message.delete()
    searching_msg = await message.reply_text("ЁЯФН *рд╡реАрдбрд┐рдпреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...*")

    try:
        # Use yt-dlp to extract video info
        loop = asyncio.get_event_loop()
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            info = await loop.run_in_executor(None, lambda: ydl.extract_info(video_url, download=False))
            if not info:
                return await searching_msg.edit("тЪая╕П *рджрд┐рдП рдЧрдП URL рдкрд░ рдХреЛрдИ рд╡реАрдбрд┐рдпреЛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред*")

            video_title = info.get("title", "Unknown Title")
            video_url = info.get("url")  # Direct video stream URL
            video_duration = info.get("duration", 0)

            # Check video duration (max 3 hours = 180 minutes = 10800 seconds)
            if video_duration > 10800:
                return await searching_msg.edit("тЪая╕П *рд╡реАрдбрд┐рдпреЛ рдмрд╣реБрдд рд▓рдВрдмрд╛ рд╣реИред рдЕрдзрд┐рдХрддрдо рдЕрдиреБрдордд рдЕрд╡рдзрд┐ 3 рдШрдВрдЯреЗ рд╣реИред*")

    except DownloadError:
        return await searching_msg.edit("тЪая╕П *рдЕрдорд╛рдиреНрдп URL рдпрд╛ рдЕрд╕рдорд░реНрдерд┐рдд рд╡реЗрдмрд╕рд╛рдЗрдЯред*")
    except Exception as e:
        logger.error(f"Video Play Error: {e}")
        return await searching_msg.edit("тЪая╕П *рдПрдХ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред*")

    await searching_msg.delete()

    # Add video to queue
    async with queue_lock:
        queue.setdefault(chat_id, []).append((video_url, video_title, "video"))
        await save_queue()

    # Join voice call if not already joined
    if not is_call_active:
        await call_py.join_group_call(
            chat_id,
            AudioPiped(video_url, stream_type=StreamType().pulse_stream)
        )
        is_call_active = True

    # Send now playing message
    await message.reply_text(
        f"ЁЯОе **рдЕрднреА рдЪрд▓ рд░рд╣рд╛ рд╡реАрдбрд┐рдпреЛ:** `{video_title}`\n"
        f"ЁЯФЧ [рд╡реАрдбрд┐рдпреЛ рджреЗрдЦреЗрдВ]({video_url})\n\n"
        "ЁЯОз *Rola Vibe рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВ!*",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("тП╕я╕П рдкреЙрдЬрд╝", callback_data="pause"),
             InlineKeyboardButton("тЦ╢я╕П рд░рд┐рдЬреНрдпреВрдо", callback_data="resume"),
             InlineKeyboardButton("тПня╕П рд╕реНрдХрд┐рдк", callback_data="skip"),
             InlineKeyboardButton("тП╣я╕П рд░реЛрдХреЗрдВ", callback_data="stop")],
            [InlineKeyboardButton("ЁЯФН рд╡рд┐рд╕реНрддрд╛рд░ рдХрд░реЗрдВ", callback_data="expand")]
        ])
    )

# тЬЕ Owner Panel Callback
@app.on_callback_query(filters.regex("^owner_panel$"))
async def owner_panel_callback(client, callback_query):
    user = callback_query.from_user

    # тЬЕ Check if user is the bot owner
    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    # тЬЕ Owner Panel Options
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯУК рдмреЙрдЯ рд╕реНрдЯреИрдЯреНрд╕", callback_data="bot_stats"),
         InlineKeyboardButton("ЁЯУв рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ", callback_data="broadcast")],
        [InlineKeyboardButton("ЁЯФз рдореЗрдиреНрдЯреЗрдиреЗрдВрд╕", callback_data="maintenance"),
         InlineKeyboardButton("ЁЯФТ рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕", callback_data="admin_commands")],
        [InlineKeyboardButton("ЁЯУЭ рд▓реЙрдЧреНрд╕ рдЪреЗрдХ рдХрд░реЗрдВ", callback_data="check_logs"),
         InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕", callback_data="back_to_start")]
    ])

    await callback_query.edit_message_text(
        "ЁЯСС **рдУрдирд░ рдкреИрдирд▓**\n\n"
        "рдмреЙрдЯ рдУрдирд░ рдХреЗ рдХрдВрдЯреНрд░реЛрд▓ рдкреИрдирд▓ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдПрдХ рдЪреБрдиреЗрдВ:",
        reply_markup=keyboard
    )

# тЬЕ Bot Stats Callback
@app.on_callback_query(filters.regex("^bot_stats$"))
async def bot_stats_callback(client, callback_query):
    user = callback_query.from_user

    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    # тЬЕ Fetch Bot Stats (Example)
    total_users = 1000  # Replace with actual logic to fetch stats
    total_groups = 50   # Replace with actual logic to fetch stats

    await callback_query.edit_message_text(
        f"ЁЯУК **рдмреЙрдЯ рд╕реНрдЯреИрдЯрд┐рд╕реНрдЯрд┐рдХреНрд╕**\n\n"
        f"ЁЯСд рдХреБрд▓ рдпреВрдЬрд░реНрд╕: `{total_users}`\n"
        f"ЁЯСе рдХреБрд▓ рдЧреНрд░реБрдкреНрд╕: `{total_groups}`\n\n"
        "ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕", callback_data="owner_panel")]
        ])
    )

# тЬЕ Broadcast Message Callback
@app.on_callback_query(filters.regex("^broadcast$"))
async def broadcast_callback(client, callback_query):
    user = callback_query.from_user

    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    await callback_query.edit_message_text(
        "ЁЯУв **рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдореИрд╕реЗрдЬ**\n\n"
        "рд╡рд╣ рдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╕рднреА рдпреВрдЬрд░реНрд╕/рдЧреНрд░реБрдкреНрд╕ рдХреЛ рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред\n\n"
        "ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕", callback_data="owner_panel")]
        ])
    )

# тЬЕ Maintenance Mode Callback
@app.on_callback_query(filters.regex("^maintenance$"))
async def maintenance_callback(client, callback_query):
    global maintenance_mode
    user = callback_query.from_user

    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    # тЬЕ Toggle Maintenance Mode
    maintenance_mode = not maintenance_mode

    await callback_query.edit_message_text(
        f"ЁЯФз **рдореЗрдиреНрдЯреЗрдиреЗрдВрд╕ рдореЛрдб**\n\n"
        f"рдореЗрдиреНрдЯреЗрдиреЗрдВрд╕ рдореЛрдб рд╡рд░реНрддрдорд╛рди рдореЗрдВ `{'ON' if maintenance_mode else 'OFF'}` рд╣реИред\n\n"
        "ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕", callback_data="owner_panel")]
        ])
    )

# тЬЕ Admin Commands Management Callback
@app.on_callback_query(filters.regex("^admin_commands$"))
async def admin_commands_callback(client, callback_query):
    user = callback_query.from_user

    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    # тЬЕ Fetch Admin Commands (Example)
    admin_commands = [".play", ".stop", ".pause", ".resume", ".skip"]

    await callback_query.edit_message_text(
        f"ЁЯФТ **рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕ рдореИрдиреЗрдЬрдореЗрдВрдЯ**\n\n"
        f"рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдЕрдиреБрдордд рдПрдбрдорд┐рди рдХрдорд╛рдВрдбреНрд╕:\n"
        f"{', '.join(admin_commands)}\n\n"
        "ЁЯФЩ рд╡рд╛рдкрд╕ рдЬрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯФЩ рд╡рд╛рдкрд╕", callback_data="owner_panel")]
        ])
    )

# тЬЕ Check Logs Callback
@app.on_callback_query(filters.regex("^check_logs$"))
async def check_logs_callback(client, callback_query):
    user = callback_query.from_user

    if user.id != OWNER_ID:
        await callback_query.answer("тЪая╕П рдХреЗрд╡рд▓ рдмреЙрдЯ рдУрдирд░ рдЗрд╕ рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ!", show_alert=True)
        return

    # тЬЕ Send Logs File (Example)
    try:
        await client.send_document(
            chat_id=user.id,
            document="rolavibe.log",
            caption="ЁЯУЭ **рдмреЙрдЯ рд▓реЙрдЧреНрд╕**\n\nрдпрд╣рд╛рдВ рдирд╡реАрдирддрдо рд▓реЙрдЧреНрд╕ рд╣реИрдВред"
        )
    except Exception as e:
        logger.error(f"Logs Send Error: {e}")
        await callback_query.answer("тЪая╕П рд▓реЙрдЧреНрд╕ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рд▓реЙрдЧ рдлрд╝рд╛рдЗрд▓ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдЬрд╛рдВрдЪреЗрдВред", show_alert=True)

    await callback_query.answer("рд▓реЙрдЧреНрд╕ рдЖрдкрдХреЗ рдкреНрд░рд╛рдЗрд╡реЗрдЯ рдЪреИрдЯ рдореЗрдВ рднреЗрдЬреЗ рдЧрдП рд╣реИрдВред", show_alert=True)

# тЬЕ Back to Start Callback
@app.on_callback_query(filters.regex("^back_to_start$"))
async def back_to_start_callback(client, callback_query):
    user = callback_query.from_user

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯО╢ рдЧрд╛рдирд╛ рдЪрд▓рд╛рдПрдВ", callback_data="play_music"),
         InlineKeyboardButton("ЁЯФК рд╡реЙрд▓реНрдпреВрдо", callback_data="volume_control")],
        [InlineKeyboardButton("ЁЯУМ рдореЗрд░реА рдкреНрд▓реЗрд▓рд┐рд╕реНрдЯ", callback_data="my_playlist"),
         InlineKeyboardButton("ЁЯО╡ рдЕрднреА рдЪрд▓ рд░рд╣рд╛ рд╣реИ", callback_data="now_playing")],
        [InlineKeyboardButton("тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕", callback_data="settings"),
         InlineKeyboardButton("ЁЯУв рдЕрдкрдбреЗрдЯреНрд╕", url="https://t.me/RolaVibeUpdates")],
        [InlineKeyboardButton("ЁЯУ╗ рд░реЗрдбрд┐рдпреЛ", callback_data="radio")]
    ])

    # тЬЕ Add Owner-Specific Option
    if user.id == OWNER_ID:
        keyboard.inline_keyboard.append([InlineKeyboardButton("ЁЯСС рдУрдирд░ рдкреИрдирд▓", callback_data="owner_panel")])

    await callback_query.edit_message_text(
        "**тЬи Rola Vibe рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯО╢**\n\n"
        "ЁЯОз *рдЕрдкрдиреЗ рдЧреНрд░реБрдк рдореЗрдВ рд╣рд╛рдИ-рдХреНрд╡рд╛рд▓рд┐рдЯреА рдореНрдпреВрдЬрд┐рдХ рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рдХрд╛ рдЖрдирдВрдж рд▓реЗрдВред*\n"
        "ЁЯО╢ *рдмрд╕ рдПрдХ рдХрдорд╛рдВрдб рд╕реЗ рдЕрдкрдиреЗ рдкрд╕рдВрджреАрджрд╛ рдЧрд╛рдиреЗ рдЪрд▓рд╛рдПрдВ!*\n\n"
        "ЁЯУМ *рдирд╡реАрдирддрдо рдЕрдкрдбреЗрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рдЬреБрдбрд╝реЗрдВ* [@RolaVibeUpdates](https://t.me/RolaVibeUpdates)\n\n"
        "ЁЯСитАНЁЯТ╗ *рдбреЗрд╡рд▓рдкрд░:* [Mr Nick](https://t.me/5620922625)",
        reply_markup=keyboard
    )

# тЬЕ Owner Commands: AI On/Off
@app.on_message(filters.command("ai on") & filters.user(OWNER_ID))
async def enable_ai(client, message: Message):
    global AI_ENABLED
    AI_ENABLED = True
    await message.reply_text("тЬЕ AI enabled. Bot will now use AI for all functions.")

@app.on_message(filters.command("ai off") & filters.user(OWNER_ID))
async def disable_ai(client, message: Message):
    global AI_ENABLED
    AI_ENABLED = False
    await message.reply_text("тЬЕ AI disabled. Bot will now work normally.")

# тЬЕ AI-Powered Functionality
async def handle_ai_functionality():
    if AI_ENABLED:
        # AI logic here (e.g., recommendations, automatic handling)
        pass
    else:
        # Normal bot functionality
        pass

# ЁЯФе Run Bot
async def main():
    try:
        await ensure_files_exist()
        await load_queue()
        await load_fm_channels()
        await load_maintenance_mode()
        await app.start()
        await call_py.start()
        await idle()
    except Exception as e:
        logger.error(f"тЭМ Bot Startup Error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
